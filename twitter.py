#!/usr/bin/env python3
"""
Ejemplo de uso de la API de Twitter/X para an√°lisis de datos
Requiere credenciales v√°lidas de desarrollador de X
"""

import tweepy
import json
import os
from datetime import datetime

def verificar_credenciales():
    """Verifica que las credenciales est√©n configuradas"""
    bearer_token = os.getenv('TWITTER_BEARER_TOKEN')
    
    if not bearer_token:
        print("‚ùå Error: TWITTER_BEARER_TOKEN no encontrado en variables de entorno")
        print("\nüìù Para configurar las credenciales:")
        print("1. Obt√©n un Bearer Token siguiendo el instructivo en contenidos/Anexos/Twitter.md")
        print("2. Ejecuta: export TWITTER_BEARER_TOKEN='tu_bearer_token_aqui'")
        print("3. O crea un archivo .env con: TWITTER_BEARER_TOKEN=tu_bearer_token_aqui")
        return None
    
    return bearer_token

def buscar_tweets_recientes(query="python", max_results=10):
    """Busca tweets recientes sobre un tema"""
    
    bearer_token = verificar_credenciales()
    if not bearer_token:
        return
    
    try:
        # Crear cliente de Twitter API v2
        client = tweepy.Client(bearer_token=bearer_token)
        
        print(f"üîç Buscando tweets sobre: '{query}'")
        
        # Buscar tweets recientes
        tweets = client.search_recent_tweets(
            query=f"{query} -is:retweet lang:es",  # Excluir retweets, solo espa√±ol
            max_results=max_results,
            tweet_fields=["created_at", "public_metrics", "author_id", "lang"],
            expansions=["author_id"],
            user_fields=["username", "name", "public_metrics"]
        )
        
        if not tweets.data:
            print("‚ùå No se encontraron tweets. Verifica tu Bearer Token y cuota de API.")
            return
        
        print(f"‚úÖ Encontrados {len(tweets.data)} tweets")
        
        # Procesar y mostrar resultados
        archivo_salida = f"/tmp/tweets_{query.replace(' ', '_')}.jsonl"
        
        with open(archivo_salida, "w", encoding="utf-8") as f:
            for tweet in tweets.data:
                # Obtener informaci√≥n del autor
                author = None
                if tweets.includes and 'users' in tweets.includes:
                    author = next(
                        (user for user in tweets.includes["users"] 
                         if user.id == tweet.author_id), 
                        None
                    )
                
                # Mostrar informaci√≥n del tweet
                print(f"\nüìù Tweet: {tweet.text[:100]}...")
                if author:
                    print(f"üë§ Autor: @{author.username} ({author.name})")
                print(f"‚ù§Ô∏è Likes: {tweet.public_metrics['like_count']} | "
                      f"üîÑ Retweets: {tweet.public_metrics['retweet_count']}")
                
                # Guardar en formato JSON
                tweet_dict = {
                    "id": tweet.id,
                    "created_at": str(tweet.created_at),
                    "text": tweet.text,
                    "author": {
                        "username": author.username if author else "unknown",
                        "name": author.name if author else "unknown",
                        "followers": author.public_metrics["followers_count"] if author else 0
                    } if author else None,
                    "metrics": tweet.public_metrics,
                    "lang": tweet.lang,
                    "fecha_extraccion": datetime.now().isoformat()
                }
                
                f.write(json.dumps(tweet_dict, ensure_ascii=False) + "\n")
        
        print(f"\nüíæ Tweets guardados en: {archivo_salida}")
        
    except tweepy.errors.Forbidden as e:
        print("‚ùå Error 403 - Acceso denegado:")
        print("   ‚Ä¢ Verifica que tu Bearer Token sea v√°lido")
        print("   ‚Ä¢ Aseg√∫rate de que tu aplicaci√≥n est√© asociada a un Proyecto")
        print("   ‚Ä¢ Revisa que tengas permisos para usar la API v2")
        print(f"   ‚Ä¢ Detalles del error: {e}")
        
    except tweepy.errors.TooManyRequests as e:
        print("‚ùå Error 429 - Demasiadas solicitudes:")
        print("   ‚Ä¢ Has excedido el l√≠mite de la API")
        print("   ‚Ä¢ Espera unos minutos antes de intentar de nuevo")
        print(f"   ‚Ä¢ Detalles del error: {e}")
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        print("   ‚Ä¢ Verifica tu conexi√≥n a internet")
        print("   ‚Ä¢ Aseg√∫rate de que tweepy est√© instalado: pip install tweepy")

def mostrar_estadisticas_api():
    """Muestra informaci√≥n sobre los l√≠mites de la API"""
    
    bearer_token = verificar_credenciales()
    if not bearer_token:
        return
    
    try:
        client = tweepy.Client(bearer_token=bearer_token)
        
        # Verificar autenticaci√≥n haciendo una b√∫squeda m√≠nima
        response = client.search_recent_tweets(
            query="test", 
            max_results=10,
            tweet_fields=["created_at"]
        )
        
        print("‚úÖ Autenticaci√≥n exitosa")
        if hasattr(response, "meta") and "result_count" in response.meta:
            print(f"‚Ä¢ Resultados de b√∫squeda de prueba: {response.meta['result_count']}")
        print("\nüìä Informaci√≥n de la API:")
        print("‚Ä¢ API Version: v2")
        print("‚Ä¢ Tier: Free (500K tweets/mes)")
        print("‚Ä¢ Search Recent: ‚úÖ Disponible")
        print("‚Ä¢ Rate Limit: Consulta los l√≠mites vigentes en la documentaci√≥n oficial:")
        print("  https://developer.twitter.com/en/docs/twitter-api/rate-limits")
        
    except Exception as e:
        print(f"‚ùå Error al verificar API: {e}")

def main():
    """Funci√≥n principal del programa"""
    
    print("üê¶ Twitter/X API - Ejemplo de An√°lisis de Datos")
    print("=" * 50)
    
    # Verificar configuraci√≥n
    print("\n1Ô∏è‚É£ Verificando configuraci√≥n...")
    mostrar_estadisticas_api()
    
    # Buscar tweets sobre Python
    print("\n2Ô∏è‚É£ Buscando tweets sobre Python...")
    buscar_tweets_recientes("python", max_results=5)
    
    # Buscar tweets sobre programaci√≥n
    print("\n3Ô∏è‚É£ Buscando tweets sobre programaci√≥n...")
    buscar_tweets_recientes("programacion", max_results=5)
    
    print("\n‚úÖ An√°lisis completado")
    print("\nüìö Para m√°s informaci√≥n sobre c√≥mo obtener credenciales:")
    print("    Ver: contenidos/Anexos/Twitter.md")

if __name__ == "__main__":
    # Intentar cargar variables de entorno desde .env si existe
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("üìÑ Variables de entorno cargadas desde .env")
    except ImportError:
        print("üí° Tip: Instala python-dotenv para usar archivos .env")
        print("    pip install python-dotenv")
    
    main()